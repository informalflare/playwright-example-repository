import { APIRequestContext } from '@playwright/test';
import fs from 'fs';
import { createSchema } from 'genson-js';
import Ajv from 'ajv';
import { expect } from '@fixtures';
import * as process from 'process';

export class BaseController {
  request: APIRequestContext;
  schemaPath: string;

  constructor(request: APIRequestContext, schemaPath: string) {
    this.request = request;
    this.schemaPath = schemaPath;
  }

  createSchema(apiName: string, data: any) {
    const path = this.schemaPath + apiName;
    const schema = createSchema(data);
    const schemaString = JSON.stringify(schema, null, 3);
    try {
      fs.writeFile(path + '.json', schemaString, function (err) {
        if (err) {
          console.log(err);
        }
      });
    } catch (err) {
      console.error(err);
    }
  }
  async validateSchema(name: string, data: any) {
    if (process.env.SKIP_SCHEMA_VALIDATION == 'true') {
      return;
    }
    const schema = this.schemaPath + name + '.json';
    if (fs.existsSync(schema)) {
      const ajv = new Ajv();
      const validate = ajv.compile(this.getJson(schema));
      const valid = validate(data);
      if (!valid) console.log(validate.errors);
      expect(valid, JSON.stringify(validate.errors)).toEqual(true);
    } else {
      this.createSchema(name, data);
      expect(
        true,
        `\nWARNING!!!!!! Schema was not found at:\n${schema}\nWe autogenerated it for you, please check if it's correct.`
      ).toEqual(false);
    }
  }
  getJson(path: string): Object {
    return JSON.parse(fs.readFileSync(path, 'utf8'));
  }
}
